{"version":3,"sources":["components/Counter/Counter2.module.css","components/Button/Button.module.css","components/Counter/Display/Display.tsx","components/Button/Button.tsx","components/Counter/Console/Console.tsx","components/Counter/Counter2.tsx","store/counter-reducer.ts","App.tsx","reportWebVitals.ts","store/redux-store.ts","index.tsx","components/Counter/Display/Display.module.css","components/Counter/Console/Console.module.css"],"names":["module","exports","Display","React","memo","props","style","console","log","mode","counter","parseInt","maxValue","s","display","error","className","IncrementMode","SetMode","minValue","changeMinValue","changeMaxValue","setMode","type","onChange","e","newValue","target","value","Button","button","onClick","callback","disabled","disabledHandler","name","Console","resetCounter","changeMode","incCounter","inc","reset","set_inc_mode","ChangeModeHandler","useCallback","set_set_mode","Counter2","initialState","SetMaxValue","newMax","SetMinValue","newMin","App","dispatch","useDispatch","useSelector","state","useEffect","minimum","localStorage","getItem","newMinimum","maximum","newMaximum","ChangeMode","setItem","toString","ChangeModeTC","ChangeMinValue","ChangeMinValueTC","ChangeMaxValue","ChangeMaxValueTC","DisabledHandler","IncCounterHandler","ResetCounterHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef6d111f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter2_counter__3-4ak\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3QF_k\"};","import React, {ChangeEvent} from \"react\";\nimport s from './Display.module.css'\n\ntype DisplayProps = {\n    mode: boolean\n    counter: number\n    minValue: string\n    maxValue: string\n    changeMinValue: (newValue: string) => void\n    changeMaxValue: (newValue: string) => void\n}\n\nexport const Display = React.memo((props: DisplayProps) => {\n        console.log('Dispalcy is rendered')\n        let style;\n        if (props.mode) {\n            style = props.counter < parseInt(props.maxValue) ? s.display : `${s.display} ${s.error}`\n        } else {\n\n        }\n\n        return <div className={style}>\n            {props.mode ? <IncrementMode counter={props.counter} maxValue={props.maxValue}/> :\n                <SetMode minValue={props.minValue} maxValue={props.maxValue} changeMinValue={props.changeMinValue}\n                         changeMaxValue={props.changeMaxValue}/>}\n        </div>\n    }\n)\n\ntype IncrementModeType = {\n    counter: number\n    maxValue: string\n}\n\nconst IncrementMode = React.memo(function (props: IncrementModeType) {\n        console.log('Increment  mode is rendered')\n        return <div className={s.counter}>\n            {props.counter}\n        </div>\n    }\n)\n\ntype SetModeType = {\n    minValue: string\n    maxValue: string\n    changeMinValue: (newValue: string) => void\n    changeMaxValue: (newValue: string) => void\n}\n\n\nconst SetMode = React.memo(function (props: SetModeType) {\n        console.log('Set mode is rendered')\n        let style = parseInt(props.minValue) < parseInt(props.maxValue) ? \"\" : `${s.setMode} ${s.error}`\n        const OnMinChangeHandler =  (e: ChangeEvent<HTMLInputElement>) => {\n            const newValue = e.target.value\n            props.changeMinValue(newValue)\n        }\n        const OnMaxChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n            const newValue = e.target.value\n            // const newNumber = parseInt(newValue)\n            props.changeMaxValue(newValue)\n            // }\n        }\n        return <div>\n            <div> min value: <input className={style} type=\"number\" onChange={OnMinChangeHandler} value={props.minValue}/>\n            </div>\n            <div> max value: <input className={style} type=\"number\" onChange={OnMaxChangeHandler} value={props.maxValue}/>\n            </div>\n        </div>\n    }\n)","import React from \"react\";\nimport s from './Button.module.css'\n\ntype ButtonType = {\n    name: string\n    callback: () => void\n    mode: boolean\n    minValue?: string\n    disabledHandler: (type: string) => boolean\n\n}\n\nexport const Button = React.memo(function (props: ButtonType) {\n\n        return <div>\n            <button className={s.button} onClick={props.callback}\n                    disabled={props.disabledHandler(props.name)}>{props.name}</button>\n        </div>\n    }\n)","import React, {useCallback} from \"react\";\nimport s from './Console.module.css'\nimport {Button} from \"../../Button/Button\";\n\ntype ConsoleType = {\n    mode: boolean\n    changeMode: () => void\n    resetCounter: () => void\n    incCounter: () => void\n    minValue: string\n    maxValue: string\n    counter: number\n    disabledHandler: (type: string) => boolean\n}\n\nexport const Console = React.memo((props: ConsoleType) => {\n        console.log('Console is rendered')\n        return <div className={s.console}>\n            {props.mode ?\n                <IncrementMode resetCounter={props.resetCounter} changeMode={props.changeMode} incCounter={props.incCounter}\n                               counter={props.counter} maxValue={props.maxValue} mode={props.mode}\n                               disabledHandler={props.disabledHandler}/> :\n                <SetMode changeMode={props.changeMode} mode={props.mode} maxValue={props.maxValue} minValue={props.minValue}\n                         disabledHandler={props.disabledHandler}/>}\n        </div>\n    }\n)\n\ntype IncrementModeType = {\n    resetCounter: () => void;\n    incCounter: () => void\n    changeMode: () => void\n    counter: number\n    maxValue: string\n    mode: boolean\n    disabledHandler: (type: string) => boolean\n}\n\nconst IncrementMode = React.memo(function (props: IncrementModeType) {\n        console.log('Console Increment mode is rendered')\n        return <div>\n            <div className={s.inc}><Button name={\"inc\"} callback={props.incCounter}\n                                           mode={props.mode} disabledHandler={props.disabledHandler}/></div>\n            <div className={s.reset}><Button name={\"reset\"} callback={props.resetCounter} mode={props.mode}\n                                             disabledHandler={props.disabledHandler}/></div>\n            <div className={s.set_inc_mode}><Button name={\"set\"} callback={props.changeMode} mode={props.mode}\n                                                    disabledHandler={props.disabledHandler}/></div>\n        </div>\n    }\n)\ntype SetModeType = {\n    changeMode: () => void\n    mode: boolean\n    minValue: string\n    maxValue: string\n    disabledHandler: (type: string) => boolean\n\n}\n\nconst SetMode = React.memo((props: SetModeType) => {\n        console.log('Console setmode is rendered')\n        const ChangeModeHandler = useCallback(() => {\n            props.changeMode()\n        }, [props])\n        return <div className={s.set_set_mode}>\n            <Button name={\"set\"} callback={ChangeModeHandler} mode={props.mode}\n                    minValue={props.minValue} disabledHandler={props.disabledHandler}/>\n        </div>\n    }\n)\n\n\n","import React from \"react\";\nimport {Display} from \"./Display/Display\";\nimport s from './Counter2.module.css'\nimport {Console} from \"./Console/Console\";\n\ntype CounterType = {\n    mode: boolean\n    counter: number\n    changeMode: () => void\n    resetCounter: () => void\n    incCounter: () => void\n    minValue: string\n    maxValue: string\n    changeMaxValue: (newValue: string) => void\n    changeMinValue: (newValue: string) => void\n    disabledHandler: (type: string) => boolean\n}\n\nexport const Counter2 = React.memo((props: CounterType) => {\n    console.log('Counter is rendered')\n        return <div className={s.counter}>\n            <Display mode={props.mode} counter={props.counter} minValue={props.minValue} maxValue={props.maxValue}\n                     changeMaxValue={props.changeMaxValue} changeMinValue={props.changeMinValue}/>\n            <Console mode={props.mode} changeMode={props.changeMode} resetCounter={props.resetCounter}\n                     incCounter={props.incCounter} counter={props.counter} maxValue={props.maxValue}\n                     minValue={props.minValue} disabledHandler={props.disabledHandler}/>\n        </div>\n    }\n)","import {Dispatch} from \"redux\";\n\nlet initialState = {\n    counter: 0,\n    mode: true,\n    minValue: '1',\n    maxValue: '10',\n}\n\nexport type InitialStateType = typeof initialState\n\nexport const CounterReducer = (state: InitialStateType = initialState, action: CounterReducerType): InitialStateType => {\n    switch (action.type) {\n        case 'CHANGE-MAX-VALUE': {\n            return {...state, maxValue: action.newMax}\n        }\n        case 'CHANGE-MIN-VALUE':\n            return {...state, minValue: action.newMin}\n        case 'INC-COUNTER':\n            return {...state, counter: state.counter += 1}\n        case 'RESET-COUNTER':\n            return {...state, counter: parseInt(state.minValue)}\n        case 'CHANGE-MODE':\n            return {...state, mode: !state.mode}\n        case 'CHANGE-COUNTER-TO-MIN':\n            return {...state, counter: parseInt(state.minValue)}\n        default:\n            return {...state}\n    }\n}\n\nexport type CounterReducerType = ChangeMaxValueActionType\n    | ChangeMinValueActionType\n    | IncCounterActionType\n    | ResetCounterActionType\n    | ChangeModeActionType\n    | ChangeCounterToMinActionType\n\nexport type ChangeMaxValueActionType = ReturnType<typeof SetMaxValue>\nexport type ChangeMinValueActionType = ReturnType<typeof SetMinValue>\nexport type IncCounterActionType = ReturnType<typeof IncCounter>\nexport type ResetCounterActionType = ReturnType<typeof ResetCounter>\nexport type ChangeModeActionType = ReturnType<typeof ChangeMode>\nexport type ChangeCounterToMinActionType = ReturnType<typeof ChangeCounterToMin>\nexport const SetMaxValue = (newMax: string) => ({\n    type: 'CHANGE-MAX-VALUE',\n    newMax\n} as const)\n\nexport const SetMinValue = (newMin: string) => ({\n    type: \"CHANGE-MIN-VALUE\",\n    newMin\n} as const)\n\nexport const IncCounter = () => ({\n    type: \"INC-COUNTER\"\n} as const)\n\nexport const ResetCounter = () => ({\n    type: 'RESET-COUNTER'\n} as const)\n\nexport const ChangeMode = () => ({\n    type: 'CHANGE-MODE'\n} as const)\n\nexport const ChangeCounterToMin = () => ({\n    type: 'CHANGE-COUNTER-TO-MIN'\n} as const)\nexport const ChangeMaxValueTC = (newValue: string) => (dispatch: Dispatch) => {\n\n    dispatch(SetMaxValue(newValue))\n    localStorage.setItem('maxValue', newValue.toString())\n\n}\n\nexport const ChangeMinValueTC = (newValue: string) => (dispatch: Dispatch) => {\n\n    dispatch(SetMinValue(newValue))\n    localStorage.setItem('minValue', newValue.toString())\n}\n\nexport const ChangeModeTC = (minValue: string, maxValue: string) => (dispatch: Dispatch) => {\n    dispatch(ChangeMode())\n    dispatch(ChangeCounterToMin())\n    localStorage.setItem('minValue', minValue.toString())\n    localStorage.setItem('maxValue', maxValue.toString())\n}\n\nexport const SetMinAndMaxTC = () => (dispatch: Dispatch) => {\n    let minimum = localStorage.getItem('minValue')\n    let newMinimum = '1'\n    let maximum = localStorage.getItem('maxValue')\n    let newMaximum = '10';\n    if (minimum !== null) {\n        newMinimum = minimum;\n    }\n    if (maximum !== null) {\n        newMaximum = maximum;\n    }\n    if (parseInt(newMinimum) >= parseInt(newMaximum) || newMaximum === '' || newMinimum === '') {\n        dispatch(ChangeMode())\n    }\n    dispatch(SetMinValue(newMinimum))\n    dispatch(SetMaxValue(newMaximum))\n    dispatch(ChangeCounterToMin())\n}","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\nimport {Counter2} from \"./components/Counter/Counter2\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"./store/redux-store\";\nimport {\n    ChangeMaxValueTC,\n    ChangeMinValueTC,\n    ChangeModeTC,\n    IncCounter,\n    ResetCounter,\n    SetMinAndMaxTC\n} from \"./store/counter-reducer\";\n\n\nfunction App() {\n    console.log('App is rendered')\n    const dispatch = useDispatch()\n    const minValue = useSelector<AppStoreType, string>(state => state.counter.minValue)\n    const maxValue = useSelector<AppStoreType, string>(state => state.counter.maxValue)\n    const mode = useSelector<AppStoreType, boolean>(state => state.counter.mode)\n    const counter = useSelector<AppStoreType, number>(state => state.counter.counter)\n    useEffect(() => {\n        dispatch(SetMinAndMaxTC())\n    }, [dispatch])\n\n\n    const ChangeMode = useCallback(() => {\n        dispatch(ChangeModeTC(minValue, maxValue))\n    }, [dispatch, minValue, maxValue])\n    const ChangeMinValue = useCallback((newValue: string) => {\n        dispatch(ChangeMinValueTC(newValue))\n    }, [dispatch])\n    const ChangeMaxValue = useCallback((newValue: string) => {\n        dispatch(ChangeMaxValueTC(newValue))\n    }, [dispatch])\n    const DisabledHandler = useCallback((type: string): boolean => {\n        if (type === \"set\") {\n            if (parseInt(minValue) >= parseInt(maxValue) || minValue === '' || maxValue === '') {\n                return true\n            }\n            if (maxValue && mode) {\n                return false\n            }\n        }\n        if (type === \"inc\") {\n            if (counter >= parseInt(maxValue)) {\n                return true\n            }\n        }\n        return false\n    }, [minValue, maxValue, counter, mode])\n\n    const IncCounterHandler = useCallback(() => {\n        dispatch(IncCounter())\n    }, [dispatch])\n\n    const ResetCounterHandler = useCallback(() => {\n        dispatch(ResetCounter())\n    }, [dispatch])\n    return (\n        <div className=\"App\">\n            <Counter2 mode={mode} counter={counter} changeMode={ChangeMode}\n                      resetCounter={ResetCounterHandler}\n                      incCounter={IncCounterHandler}\n                      minValue={minValue}\n                      maxValue={maxValue}\n                      changeMinValue={ChangeMinValue}\n                      changeMaxValue={ChangeMaxValue}\n                      disabledHandler={DisabledHandler}\n            />\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {CounterReducer} from \"./counter-reducer\";\nimport thunk from \"redux-thunk\";\n\nconst rootReducer = combineReducers({\n    counter: CounterReducer\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport type AppStoreType = ReturnType<typeof rootReducer>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./store/redux-store\";\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2CvPx\",\"error\":\"Display_error__31ITC\",\"input\":\"Display_input__2CY-G\",\"counter\":\"Display_counter__237ry\",\"setMode\":\"Display_setMode__20fNL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"console\":\"Console_console__2czC_\",\"inc\":\"Console_inc__rnsg9\",\"set_inc_mode\":\"Console_set_inc_mode__4aK37\",\"reset\":\"Console_reset__1tqWr\",\"set_set_mode\":\"Console_set_set_mode__3axeD\"};"],"sourceRoot":""}