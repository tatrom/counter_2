{"version":3,"sources":["components/Counter/Counter2.module.css","components/Button/Button.module.css","components/Counter/Display/Display.tsx","components/Button/Button.tsx","components/Counter/Console/Console.tsx","components/Counter/Counter2.tsx","store/counter-reducer.ts","App.tsx","reportWebVitals.ts","store/redux-store.ts","index.tsx","components/Counter/Display/Display.module.css","components/Counter/Console/Console.module.css"],"names":["module","exports","Display","props","style","mode","counter","parseInt","maxValue","s","display","error","className","IncrementMode","SetMode","minValue","changeMinValue","changeMaxValue","setMode","type","onChange","e","newValue","target","value","Button","button","onClick","callback","disabled","disabledHandler","name","Console","console","resetCounter","changeMode","incCounter","inc","reset","set_inc_mode","set_set_mode","Counter2","initialState","SetMaxValue","newMax","SetMinValue","newMin","App","dispatch","useDispatch","state","useSelector","useEffect","minimum","localStorage","getItem","newMinimum","maximum","newMaximum","setItem","toString","ChangeMinValueTC","ChangeMaxValueTC","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0d1b77cf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter2_counter__3-4ak\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3QF_k\"};","import React, {ChangeEvent} from \"react\";\nimport s from './Display.module.css'\n\ntype DisplayProps = {\n    mode: boolean\n    counter: number\n    minValue: string\n    maxValue: string\n    changeMinValue: (newValue: string) => void\n    changeMaxValue: (newValue: string) => void\n}\n\nexport function Display(props: DisplayProps) {\n    let style;\n    if (props.mode) {\n        style = props.counter < parseInt(props.maxValue) ? s.display : `${s.display} ${s.error}`\n    } else {\n\n    }\n\n    return <div className={style}>\n        {props.mode ? <IncrementMode counter={props.counter} maxValue={props.maxValue}/> :\n            <SetMode minValue={props.minValue} maxValue={props.maxValue} changeMinValue={props.changeMinValue}\n                     changeMaxValue={props.changeMaxValue}/>}\n    </div>\n}\n\ntype IncrementModeType = {\n    counter: number\n    maxValue: string\n}\n\nfunction IncrementMode(props: IncrementModeType) {\n    return <div className={s.counter}>\n        {props.counter}\n    </div>\n}\n\ntype SetModeType = {\n    minValue: string\n    maxValue: string\n    changeMinValue: (newValue: string) => void\n    changeMaxValue: (newValue: string) => void\n}\n\n\nfunction SetMode(props: SetModeType) {\n    let style = parseInt(props.minValue) < parseInt(props.maxValue) ? \"\" : `${s.setMode} ${s.error}`\n    const OnMinChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        const newValue = e.target.value\n        props.changeMinValue(newValue)\n    }\n    const OnMaxChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        const newValue = e.target.value\n        // if (newValue !== \"\") {\n        //     props.changeMaxValue(newValue)\n        // } else {\n        // const newNumber = parseInt(newValue)\n        props.changeMaxValue(newValue)\n        // }\n    }\n    return <div>\n        <div> min value: <input className={style} type=\"number\" onChange={OnMinChangeHandler} value={props.minValue}/>\n        </div>\n        <div> max value: <input className={style} type=\"number\" onChange={OnMaxChangeHandler} value={props.maxValue}/>\n        </div>\n    </div>\n}","import React from \"react\";\nimport s from './Button.module.css'\n\ntype ButtonType = {\n    name: string\n    callback: () => void\n    mode: boolean\n    minValue?: string\n    disabledHandler: (type: string) => boolean\n\n}\n\nexport function Button(props: ButtonType) {\n\n    return <div>\n        <button className={s.button} onClick={props.callback} disabled={props.disabledHandler(props.name)}>{props.name}</button>\n    </div>\n}","import React from \"react\";\nimport s from './Console.module.css'\nimport {Button} from \"../../Button/Button\";\n\ntype ConsoleType = {\n    mode: boolean\n    changeMode: () => void\n    resetCounter: () => void\n    incCounter: () => void\n    minValue: string\n    maxValue: string\n    counter: number\n    disabledHandler: (type: string) => boolean\n}\n\nexport function Console(props: ConsoleType) {\n    return <div className={s.console}>\n        {props.mode ?\n            <IncrementMode resetCounter={props.resetCounter} changeMode={props.changeMode} incCounter={props.incCounter}\n                           counter={props.counter} maxValue={props.maxValue} mode={props.mode}\n                           disabledHandler={props.disabledHandler}/> :\n            <SetMode changeMode={props.changeMode} mode={props.mode} maxValue={props.maxValue} minValue={props.minValue}\n                     disabledHandler={props.disabledHandler}/>}\n    </div>\n}\n\ntype IncrementModeType = {\n    resetCounter: () => void;\n    incCounter: () => void\n    changeMode: () => void\n    counter: number\n    maxValue: string\n    mode: boolean\n    disabledHandler: (type: string) => boolean\n}\n\nfunction IncrementMode(props: IncrementModeType) {\n    return <div>\n        <div className={s.inc}><Button name={\"inc\"} callback={props.incCounter}\n                                       mode={props.mode} disabledHandler={props.disabledHandler}/></div>\n        <div className={s.reset}><Button name={\"reset\"} callback={props.resetCounter} mode={props.mode}\n                                         disabledHandler={props.disabledHandler}/></div>\n        <div className={s.set_inc_mode}><Button name={\"set\"} callback={props.changeMode} mode={props.mode}\n                                                disabledHandler={props.disabledHandler}/></div>\n    </div>\n}\n\ntype SetModeType = {\n    changeMode: () => void\n    mode: boolean\n    minValue: string\n    maxValue: string\n    disabledHandler: (type: string) => boolean\n\n}\n\nfunction SetMode(props: SetModeType) {\n    const ChangeModeHandler = () => {\n        props.changeMode()\n    }\n    return <div className={s.set_set_mode}>\n        <Button name={\"set\"} callback={ChangeModeHandler} mode={props.mode}\n                minValue={props.minValue} disabledHandler={props.disabledHandler}/>\n    </div>\n}\n\n\n","import React from \"react\";\nimport {Display} from \"./Display/Display\";\nimport s from './Counter2.module.css'\nimport {Console} from \"./Console/Console\";\ntype CounterType = {\n    mode: boolean\n    counter: number\n    changeMode: () => void\n    resetCounter: () => void\n    incCounter: () => void\n    minValue: string\n    maxValue: string\n    changeMaxValue: (newValue: string) => void\n    changeMinValue: (newValue: string) => void\n    disabledHandler: (type: string) => boolean\n}\n\nexport function Counter2(props:CounterType) {\n\n    return <div className={s.counter}>\n        <Display mode={props.mode} counter={props.counter} minValue={props.minValue} maxValue={props.maxValue} changeMaxValue={props.changeMaxValue} changeMinValue={props.changeMinValue} />\n        <Console mode={props.mode} changeMode={props.changeMode} resetCounter={props.resetCounter} incCounter={props.incCounter} counter={props.counter} maxValue={props.maxValue} minValue={props.minValue} disabledHandler={props.disabledHandler} />\n    </div>\n}","import {Dispatch} from \"redux\";\n\nlet initialState = {\n    counter: 0,\n    mode: true,\n    minValue: '1',\n    maxValue: '10',\n}\n\nexport type InitialStateType = typeof initialState\n\nexport const CounterReducer = (state: InitialStateType = initialState, action: CounterReducerType): InitialStateType => {\n    switch (action.type) {\n        case 'CHANGE-MAX-VALUE': {\n            return {...state, maxValue: action.newMax}\n        }\n        case 'CHANGE-MIN-VALUE':\n            return {...state, minValue: action.newMin}\n        case 'INC-COUNTER':\n            return {...state, counter: state.counter += 1}\n        case 'RESET-COUNTER':\n            return {...state, counter: parseInt(state.minValue)}\n        case 'CHANGE-MODE':\n            return {...state, mode: !state.mode}\n        case 'CHANGE-COUNTER-TO-MIN':\n            return {...state, counter: parseInt(state.minValue)}\n        default:\n            return {...state}\n    }\n}\n\nexport type CounterReducerType = ChangeMaxValueActionType\n    | ChangeMinValueActionType\n    | IncCounterActionType\n    | ResetCounterActionType\n    | ChangeModeActionType\n    | ChangeCounterToMinActionType\n\nexport type ChangeMaxValueActionType = ReturnType<typeof SetMaxValue>\nexport type ChangeMinValueActionType = ReturnType<typeof SetMinValue>\nexport type IncCounterActionType = ReturnType<typeof IncCounter>\nexport type ResetCounterActionType = ReturnType<typeof ResetCounter>\nexport type ChangeModeActionType = ReturnType<typeof ChangeMode>\nexport type ChangeCounterToMinActionType = ReturnType<typeof ChangeCounterToMin>\nexport const SetMaxValue = (newMax: string) => ({\n    type: 'CHANGE-MAX-VALUE',\n    newMax\n} as const)\n\nexport const SetMinValue = (newMin: string) => ({\n    type: \"CHANGE-MIN-VALUE\",\n    newMin\n} as const)\n\nexport const IncCounter = () => ({\n    type: \"INC-COUNTER\"\n} as const)\n\nexport const ResetCounter = () => ({\n    type: 'RESET-COUNTER'\n} as const)\n\nexport const ChangeMode = () => ({\n    type: 'CHANGE-MODE'\n} as const)\n\nexport const ChangeCounterToMin = () => ({\n    type: 'CHANGE-COUNTER-TO-MIN'\n} as const)\nexport const ChangeMaxValueTC = (newValue: string) => (dispatch: Dispatch) => {\n\n    dispatch(SetMaxValue(newValue))\n    localStorage.setItem('maxValue', newValue.toString())\n\n}\n\nexport const ChangeMinValueTC = (newValue: string) => (dispatch: Dispatch) => {\n\n    dispatch(SetMinValue(newValue))\n    localStorage.setItem('minValue', newValue.toString())\n}\n\nexport const ChangeModeTC = (minValue: string, maxValue: string) => (dispatch: Dispatch) => {\n    dispatch(ChangeMode())\n    dispatch(ChangeCounterToMin())\n    localStorage.setItem('minValue', minValue.toString())\n    localStorage.setItem('maxValue', maxValue.toString())\n}\n\nexport const SetMinAndMaxTC = () => (dispatch: Dispatch) => {\n    let minimum = localStorage.getItem('minValue')\n    let newMinimum = '1'\n    let maximum = localStorage.getItem('maxValue')\n    let newMaximum = '10';\n    if (minimum !== null) {\n        newMinimum = minimum;\n    }\n    if (maximum !== null) {\n        newMaximum = maximum;\n    }\n    if (parseInt(newMinimum) >= parseInt(newMaximum) || newMaximum === '' || newMinimum === '') {\n        dispatch(ChangeMode())\n    }\n    dispatch(SetMinValue(newMinimum))\n    dispatch(SetMaxValue(newMaximum))\n    dispatch(ChangeCounterToMin())\n}","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Counter2} from \"./components/Counter/Counter2\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStoreType} from \"./store/redux-store\";\nimport {\n    ChangeMaxValueTC,\n    ChangeMinValueTC,\n    ChangeModeTC,\n    IncCounter,\n    InitialStateType,\n    ResetCounter,\n    SetMinAndMaxTC\n} from \"./store/counter-reducer\";\n\n\nfunction App() {\n    const dispatch = useDispatch()\n    const state = useSelector<AppStoreType, InitialStateType>(state => state.counter)\n    useEffect(() => {\n        dispatch(SetMinAndMaxTC())\n    }, [dispatch])\n\n\n    const ChangeMode = () => {\n        dispatch(ChangeModeTC(state.minValue, state.maxValue))\n    }\n\n    const ChangeMinValue = (newValue: string) => {\n        dispatch(ChangeMinValueTC(newValue))\n    }\n    const ChangeMaxValue = (newValue: string) => {\n        dispatch(ChangeMaxValueTC(newValue))\n    }\n    const DisabledHandler = (type: string): boolean => {\n        if (type === \"set\") {\n            if (parseInt(state.minValue) >= parseInt(state.maxValue) || state.minValue === '' || state.maxValue === '') {\n                return true\n            }\n            if (state.maxValue && state.mode) {\n                return false\n            }\n        }\n        if (type === \"inc\") {\n            if (state.counter >= parseInt(state.maxValue)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    const IncCounterHandler = () => {\n        dispatch(IncCounter())\n    }\n\n    const ResetCounterHandler = () => {\n        dispatch(ResetCounter())\n    }\n    return (\n        <div className=\"App\">\n            <Counter2 mode={state.mode} counter={state.counter} changeMode={ChangeMode}\n                      resetCounter={ResetCounterHandler}\n                      incCounter={IncCounterHandler}\n                      minValue={state.minValue}\n                      maxValue={state.maxValue}\n                      changeMinValue={ChangeMinValue}\n                      changeMaxValue={ChangeMaxValue}\n                      disabledHandler={DisabledHandler}\n            />\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {CounterReducer} from \"./counter-reducer\";\nimport thunk from \"redux-thunk\";\n\nconst rootReducer = combineReducers({\n    counter: CounterReducer\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport type AppStoreType = ReturnType<typeof rootReducer>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./store/redux-store\";\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2CvPx\",\"error\":\"Display_error__31ITC\",\"input\":\"Display_input__2CY-G\",\"counter\":\"Display_counter__237ry\",\"setMode\":\"Display_setMode__20fNL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"console\":\"Console_console__2czC_\",\"inc\":\"Console_inc__rnsg9\",\"set_inc_mode\":\"Console_set_inc_mode__4aK37\",\"reset\":\"Console_reset__1tqWr\",\"set_set_mode\":\"Console_set_set_mode__3axeD\"};"],"sourceRoot":""}