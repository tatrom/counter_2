{"version":3,"sources":["components/Counter/Display/Display.module.css","components/Counter/Console/Console.module.css","components/Counter/Counter2.module.css","components/Button/Button.module.css","components/Counter/Display/Display.tsx","components/Button/Button.tsx","components/Counter/Console/Console.tsx","components/Counter/Counter2.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Display","props","style","mode","counter","maxValue","s","display","error","className","IncrementMode","SetMode","minValue","changeMinValue","changeMaxValue","setMode","type","onChange","e","newValue","target","value","newNumber","parseInt","Button","button","onClick","callback","disabled","disabledHandler","name","Console","console","resetCounter","changeMode","incCounter","inc","reset","set_inc_mode","set_set_mode","Counter2","App","minimum","localStorage","getItem","newMinimum","maximum","newMaximum","useState","setCounter","setMinValue","setMaxValue","noMaxValue","setNoMaxValue","log","setItem","toString","noValue","newMax","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa7b2c5b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2CvPx\",\"error\":\"Display_error__31ITC\",\"input\":\"Display_input__2CY-G\",\"counter\":\"Display_counter__237ry\",\"setMode\":\"Display_setMode__20fNL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"console\":\"Console_console__2czC_\",\"inc\":\"Console_inc__rnsg9\",\"set_inc_mode\":\"Console_set_inc_mode__4aK37\",\"reset\":\"Console_reset__1tqWr\",\"set_set_mode\":\"Console_set_set_mode__3axeD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter2_counter__3-4ak\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3QF_k\"};","import React, {ChangeEvent} from \"react\";\nimport s from './Display.module.css'\n\ntype DisplayProps = {\n    mode: boolean\n    counter: number\n    minValue: number\n    maxValue: number\n    changeMinValue: (newValue: number) => void\n    changeMaxValue: (newValue: string, noValue: boolean) => void\n}\n\nexport function Display(props: DisplayProps) {\n    let style;\n    if (props.mode) {\n        style = props.counter < props.maxValue ? s.display : `${s.display} ${s.error}`\n    } else {\n\n    }\n\n    return <div className={style}>\n        {props.mode ? <IncrementMode counter={props.counter} maxValue={props.maxValue}/> :\n            <SetMode minValue={props.minValue} maxValue={props.maxValue} changeMinValue={props.changeMinValue}\n                     changeMaxValue={props.changeMaxValue}/>}\n    </div>\n}\n\ntype IncrementModeType = {\n    counter: number\n    maxValue: number\n}\n\nfunction IncrementMode(props: IncrementModeType) {\n    return <div className={s.counter}>\n        {props.counter}\n    </div>\n}\n\ntype SetModeType = {\n    minValue: number\n    maxValue: number\n    changeMinValue: (newValue: number) => void\n    changeMaxValue: (newValue: string, noValue: boolean ) => void\n}\n\n\nfunction SetMode(props: SetModeType) {\n    let style = props.minValue < props.maxValue ? \"\" : `${s.setMode} ${s.error}`\n    const OnMinChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        const newValue = e.target.value\n        const newNumber = parseInt(newValue)\n        props.changeMinValue(newNumber)\n    }\n    const OnMaxChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n            const newValue = e.target.value\n        if ( newValue !== \"\" ) {\n            props.changeMaxValue(newValue, false)\n        } else {\n            props.changeMaxValue(newValue, true)\n        }\n    }\n    return <div>\n        <div> min value: <input className={style} type=\"number\" onChange={OnMinChangeHandler} value={props.minValue}/>\n        </div>\n        <div> max value: <input className={style} type=\"number\" onChange={OnMaxChangeHandler} value={props.maxValue}/>\n        </div>\n    </div>\n}","import React from \"react\";\nimport s from './Button.module.css'\n\ntype ButtonType = {\n    name: string\n    callback: () => void\n    counter?: number\n    maxValue?: number\n    mode: boolean\n    minValue?: number\n    disabledHandler: (type: string) => boolean\n\n}\n\nexport function Button(props: ButtonType) {\n\n    return <div>\n        <button className={s.button} onClick={props.callback} disabled={props.disabledHandler(props.name)}>{props.name}</button>\n    </div>\n}","import React from \"react\";\nimport s from './Console.module.css'\nimport {Button} from \"../../Button/Button\";\n\ntype ConsoleType = {\n    mode: boolean\n    changeMode: () => void\n    resetCounter: () => void\n    incCounter: () => void\n    minValue: number\n    maxValue: number\n    counter: number\n    disabledHandler: (type: string) => boolean\n}\n\nexport function Console(props: ConsoleType) {\n    return <div className={s.console}>\n        {props.mode ?\n            <IncrementMode resetCounter={props.resetCounter} changeMode={props.changeMode} incCounter={props.incCounter}\n                           counter={props.counter} maxValue={props.maxValue} mode={props.mode}\n                           disabledHandler={props.disabledHandler}/> :\n            <SetMode changeMode={props.changeMode} mode={props.mode} maxValue={props.maxValue} minValue={props.minValue}\n                     disabledHandler={props.disabledHandler}/>}\n    </div>\n}\n\ntype IncrementModeType = {\n    resetCounter: () => void;\n    incCounter: () => void\n    changeMode: () => void\n    counter: number\n    maxValue: number\n    mode: boolean\n    disabledHandler: (type: string) => boolean\n}\n\nfunction IncrementMode(props: IncrementModeType) {\n    return <div>\n        <div className={s.inc}><Button name={\"inc\"} callback={props.incCounter} maxValue={props.maxValue}\n                                       counter={props.counter}\n                                       mode={props.mode} disabledHandler={props.disabledHandler}/></div>\n        <div className={s.reset}><Button name={\"reset\"} callback={props.resetCounter} mode={props.mode}\n                                         disabledHandler={props.disabledHandler}/></div>\n        <div className={s.set_inc_mode}><Button name={\"set\"} callback={props.changeMode} mode={props.mode}\n                                                disabledHandler={props.disabledHandler}/></div>\n    </div>\n}\n\ntype SetModeType = {\n    changeMode: () => void\n    mode: boolean\n    minValue: number\n    maxValue: number\n    disabledHandler: (type: string) => boolean\n\n}\n\nfunction SetMode(props: SetModeType) {\n    const ChangeModeHandler = () => {\n        props.changeMode()\n    }\n    return <div className={s.set_set_mode}>\n        <Button name={\"set\"} callback={ChangeModeHandler} mode={props.mode} maxValue={props.maxValue}\n                minValue={props.minValue} disabledHandler={props.disabledHandler}/>\n    </div>\n}\n\n\n","import React from \"react\";\nimport {Display} from \"./Display/Display\";\nimport s from './Counter2.module.css'\nimport {Console} from \"./Console/Console\";\ntype CounterType = {\n    mode: boolean\n    counter: number\n    changeMode: () => void\n    resetCounter: () => void\n    incCounter: () => void\n    minValue: number\n    maxValue: number\n    changeMaxValue: (newValue: string, noValue: boolean) => void\n    changeMinValue: (newValue: number) => void\n    disabledHandler: (type: string) => boolean\n}\n\nexport function Counter2(props:CounterType) {\n\n    return <div className={s.counter}>\n        <Display mode={props.mode} counter={props.counter} minValue={props.minValue} maxValue={props.maxValue} changeMaxValue={props.changeMaxValue} changeMinValue={props.changeMinValue} />\n        <Console mode={props.mode} changeMode={props.changeMode} resetCounter={props.resetCounter} incCounter={props.incCounter} counter={props.counter} maxValue={props.maxValue} minValue={props.minValue} disabledHandler={props.disabledHandler} />\n    </div>\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter2} from \"./components/Counter/Counter2\";\n\n\nfunction App() {\n    let minimum = localStorage.getItem('minValue')\n    let newMinimum = 1;\n    let maximum = localStorage.getItem('maxValue')\n    let newMaximum = 10;\n    if (minimum !== null) {\n        newMinimum = parseInt(minimum)\n    }\n    if (maximum !== null) {\n        newMaximum = parseInt(maximum)\n    }\n    let [counter, setCounter] = useState<number>(newMinimum)\n    let [mode, setMode] = useState<boolean>(false)\n    let [minValue, setMinValue] = useState<number>(newMinimum)\n    let [maxValue, setMaxValue] = useState<number>(newMaximum)\n    let [noMaxValue, setNoMaxValue] = useState<boolean>(false)\n    const ChangeMode = () => {\n        setMode(!mode);\n        setCounter(minValue);\n        // localStorage.setItem('minValue', minValue.toString())\n        // localStorage.setItem('maxValue', maxValue.toString())\n    }\n    const IncCounter = () => {\n        setCounter(counter + 1)\n    }\n    const ResetCounter = () => {\n        setCounter(newMinimum);\n    }\n    const ChangeMinValue = (newValue: number) => {\n        setMinValue(newValue)\n        localStorage.setItem('minValue', newValue.toString())\n    }\n    const ChangeMaxValue = (newValue: string, noValue: boolean) => {\n        if ( noValue) {\n            setNoMaxValue(noValue)\n            let newMax = parseInt(newValue);\n            setMaxValue(newMax)\n            localStorage.setItem('maxValue', newValue.toString())\n        } else {\n            setNoMaxValue(noValue)\n            let newMax = parseInt(newValue);\n            setMaxValue(newMax)\n            localStorage.setItem('maxValue', newValue.toString())\n        }\n    }\n\n    const DisabledHandler = (type: string): boolean => {\n        if (type === \"set\") {\n            if (minValue >= maxValue ) {\n                return true\n            }\n            if (noMaxValue) {\n                return true\n            }\n            return false\n        }\n        if (type === \"inc\") {\n            if (counter >= maxValue) {\n                return true\n            }\n\n        }\n\n        return false\n    }\n    console.log(localStorage.getItem('minValue'))\n    return (\n        <div className=\"App\">\n            <Counter2 mode={mode} counter={counter} changeMode={ChangeMode} resetCounter={ResetCounter}\n                      incCounter={IncCounter} minValue={minValue} maxValue={maxValue}\n                      changeMinValue={ChangeMinValue}\n                      changeMaxValue={ChangeMaxValue}\n                      disabledHandler={DisabledHandler}\n            />\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}